/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        List<Integer> ll = new LinkedList<Integer>();
        if(root==null){
            return list;
        }
        queue.add(root);
        while(!queue.isEmpty()){
            List<Integer> l = new LinkedList<Integer>();
            int size = queue.size();
            for(int i=0;i<size;i++){
                TreeNode node = queue.poll();
                //System.out.println(node.val);
                l.add(node.val);
                TreeNode left = node.left;
                TreeNode right = node.right;
                if(left!=null){
                    queue.add(left);
                    //l.add(root.left.val);
                }
                if(right!=null){
                    queue.add(right);
                    //l.add(right.val);
                }
            }
            if(l.size()>0){
               list.add(l);
            }
        }
        return list;
    }
        
}
